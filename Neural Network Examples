# Mirkhan Problems Solving NND 

# Hard limit function
# P2.1
# R code

p = 2;               # input of network 
w = 2.3;             # weight of network
b = -3;              # bias of network
n = w*p + b          # output of network
n 
# -------------------------------------

# element computation for hard limit function  
hardlim = function(x) if(x<0) return(0) else return(1) 

a = hardlim(n)       # output of network function
a 
# -------------------------------------

# define R functions with different inputs  

# element, vector and matrix computation 
# Hard limit 
hardlim <- function(x) {
  y <- x
  y[y >= 0] <- 1
  y[y < 0] <- 0
  y }

# Symmetrical Hard limit
hardlims <- function(x) {
  y <- x
  y[y >= 0] <- 1
  y[y < 0] <- -1
  y }

# Linear 
purelin = function(x) return(x) 

# Saturating Linear 
satlin = function(x){
  y <- x
  y[y < 0] <- 0
  y[y > 1] <- 1 
  y }    

# Simmetrical Saturating Linear
satlins = function(x){
  y <- x
  y[y < 0] <- -1 
  y[y > 1] <- 1 
  y }    

# log-sigmid
logsig = function(x) return(1/(1+exp(-x))) 

# Hyperbolic Tangent Sigmoid
tansig = function(x) return(tanh(x))

# Positive Linear
poslin <- function(x) {
  y <- x
  y[y < 0] <- 0
  y }

# Competitive
compet = function(x){
 y <- rep(0, times = length(x)); 
 a <- 0 
 a = which(x == max(x))
 y[a] <- 1
 return(y) }
# -------------------------------------

# run R functions with different inputs  
a1 = 1.6  
b1 = c(3, -1) 
c1 = matrix(c(1.6, -1, 0.5, 0), nrow = 2, byrow = TRUE)  

# Hard limit 
hardlim(a1)
hardlim(b1)
hardlim(c1)

# Symmetrical Hard limit
hardlims(a1)
hardlims(b1)
hardlims(c1)

# Linear 
purelin(a1)
purelin(b1)
purelin(c1)

# Saturating Linear 
satlin(a1)
satlin(b1)
satlin(c1)

# Simmetrical Saturating Linear
satlins(a1)
satlins(b1)
satlins(c1)

# log-sigmid
logsig(a1)
logsig(b1)
logsig(c1)

# Hyperbolic Tangent Sigmoid
tansig(a1)
tansig(b1)
tansig(c1)

# Positive Linear
poslin(a1)
poslin(b1)
poslin(c1)

# Competitive
compet(a1)
compet(b1)
compet(c1)
# -------------------------------------
